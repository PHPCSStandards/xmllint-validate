# Actions docs: https://docs.github.com/en/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions
# XMLLint docs: http://xmlsoft.org/xmllint.html

name: 'XMLLint Validate'
author: 'Juliette Reinders Folmer'
description: >-
  Validate an XML file for being well-formed.

# Icons available: https://feathericons.com/
branding:
  icon: 'check-circle'
  color: 'green'

inputs:
  pattern:
    description: 'Path to the file or glob pattern for the file(s) to validate with xmllint.'
    required: true
  xsd-file:
    description: 'Path to a local file containing the XSD schema to validate against.'
    required: false
    default: ''
  xsd-url:
    description: 'URL to a remote file containing the XSD schema to validate against.'
    required: false
    default: ''
  show-in-pr:
    description: 'Show any errors from xmllint inline in PRs ?'
    required: false
  debug:
    description: 'Whether to show verbose output for debugging the action'
    required: false

runs:
  using: "composite"
  steps:
    - name: 'Validate pattern input'
      if: ${{ ! inputs.pattern }}
      shell: bash
      run: |
        # Validate pattern input.
        echo "::error title=XMLLint Validate::Missing required input 'pattern'. Please provide a path to a file or a glob pattern."
        exit 1

    - name: 'Set debug mode'
      env:
        DEBUG_INPUT: ${{ inputs.debug }}
      shell: bash
      run: |
        # Determine debug mode.
        if [[ "${{ env.DEBUG_INPUT }}" == "true" ]]; then
          echo "DEBUG=true" >> "$GITHUB_ENV"
        else
          echo "DEBUG=false" >> "$GITHUB_ENV"
        fi

    - name: 'Validate local XSD file input'
      id: valid_xsdfile
      if: ${{ inputs.xsd-file }}
      env:
        XSD_FILE: ${{ inputs.xsd-file }}
      shell: bash
      run: |
        # Validate local file input.
        # Check for non-zero length file name.
        if [[ -n "${{ env.XSD_FILE }}" ]]; then
          # Check that file name ends on .xsd.
          if [[ "${{ endsWith( env.XSD_FILE, '.xsd' ) }}" == "false" ]]; then
            echo "::error title=XMLLint Validate::Local XSD file must use an '.xsd' file extension."
            exit 1
          # Check the file exists and has contents (file size greater than zero).
          elif [[ -f "${{ env.XSD_FILE }}" && -s "${{ env.XSD_FILE }}" ]]; then
            echo 'Local XSD file found.'
            exit 0
          else
            echo "::error title=XMLLint Validate::Local XSD file must exist and have a file size greater than 0."
            exit 1
          fi
        fi

    - name: 'Notify about precedence'
      if: ${{ inputs.xsd-file && inputs.xsd-url }}
      shell: bash
      # yamllint disable rule:line-length
      run: |
        echo "::warning title=XMLLint Validate::Both a local file as well as a remote URL passed for the XSD file. The local file takes precedence, the remote URL will be ignored."
        # yamllint enable rule:line-length

    - name: 'Set local file name'
      if: ${{ ! inputs.xsd-file && inputs.xsd-url }}
      shell: bash
      run: |
        # Set environment variable.
        # Name which is unlikely to conflict with any existing files in a repo.
        echo "DOWNLOADED_XSD_FILE=xmllint-validate-action-schema.xsd" >> "$GITHUB_ENV"

    - name: 'Validate the URL and download the schema file'
      id: valid_xsdurl
      if: ${{ ! inputs.xsd-file && inputs.xsd-url }}
      env:
        XSD_URL: ${{ inputs.xsd-url }}
      shell: bash
      # yamllint disable rule:line-length
      run: |
        # Validate remote URL input and download file.
        # Check for non-zero length URL input.
        if [[ -n "${{ env.XSD_URL }}" ]]; then
          # Check that URL uses http(s) protocol.
          if [[ "${{ startsWith( env.XSD_URL, 'http://' ) || startsWith( env.XSD_URL, 'https://' ) || startsWith( env.XSD_URL, 'ftp://' ) }}" == "false" ]]; then
            echo "::error title=XMLLint Validate::URL to the XSD file must be an 'http', 'https' or 'ftp' URL."
            exit 1
          # Check that URL ends on .xsd.
          elif [[ "${{ endsWith( env.XSD_URL, '.xsd' ) }}" == "false" ]]; then
            echo "::error title=XMLLint Validate::URL to the XSD file must point to a file using an '.xsd' file extension."
            exit 1
          # Try to download it.
          else
            if [[ "${{ env.DEBUG }}" == "false" ]]; then
              wget -nc -nv "${{ env.XSD_URL }}" -O "${{ env.DOWNLOADED_XSD_FILE }}"
            else
              wget -nc "${{ env.XSD_URL }}" -O "${{ env.DOWNLOADED_XSD_FILE }}"
            fi
            if [[ -f "${{ env.DOWNLOADED_XSD_FILE }}" && -s "${{ env.DOWNLOADED_XSD_FILE }}" ]]; then
              echo 'Download of the XSD file succesfull.'
              exit 0
            else
              echo "::error title=XMLLint Validate::Remote XSD file must exist and have a file size greater than 0."
              exit 1
            fi
          fi
        fi
        # yamllint enable rule:line-length

    # Updating the lists can fail intermittently, typically after Microsoft has released a new package.
    # This should not be blocking for this action, so ignore any errors from this step.
    # Ref: https://github.com/dotnet/core/issues/4167
    - name: 'Update the available packages list'
      continue-on-error: true
      shell: bash
      run: |
        # Update package list.
        if [[ "${{ env.DEBUG }}" == "false" ]]; then
          sudo apt-get -q update > /dev/null
        else
          sudo apt-get update
        fi

    - name: 'Install xmllint'
      shell: bash
      run: |
        # Install xmllint.
        if [[ "${{ env.DEBUG }}" == "false" ]]; then
          sudo apt-get -q install --no-install-recommends -y libxml2-utils > /dev/null
        else
          sudo apt-get install --no-install-recommends -y libxml2-utils
          xmllint --version
        fi

    # Show XML violations inline in the file diff.
    # @link https://github.com/marketplace/actions/xmllint-problem-matcher
    - name: 'Enable showing XML issues inline'
      if: ${{ inputs.show-in-pr != 'false' }}
      uses: korelstar/xmllint-problem-matcher@v1

    - name: 'List files'
      if: ${{ inputs.debug }}
      env:
        GLOB_PATTERN: ${{ inputs.pattern }}
      shell: bash
      run: |
        # List files which will be examined.
        ls -ah $GLOB_PATTERN

    - name: 'Validate for well-formedness'
      if: ${{ ! inputs.xsd-file && ! inputs.xsd-url }}
      env:
        GLOB_PATTERN: ${{ inputs.pattern }}
      shell: bash
      run: xmllint --noout $GLOB_PATTERN

    - name: 'Validate against local schema'
      if: ${{ inputs.xsd-file }}
      env:
        GLOB_PATTERN: ${{ inputs.pattern }}
        XSD_FILE: ${{ inputs.xsd-file }}
      shell: bash
      run: xmllint --noout --schema "$XSD_FILE" $GLOB_PATTERN

    - name: 'Validate against downloaded remote schema'
      if: ${{ ! inputs.xsd-file && inputs.xsd-url }}
      env:
        GLOB_PATTERN: ${{ inputs.pattern }}
      shell: bash
      run: xmllint --noout --schema ${{ env.DOWNLOADED_XSD_FILE }} $GLOB_PATTERN

    - name: 'Clean up downloaded file'
      if: ${{ ! inputs.xsd-file && inputs.xsd-url }}
      shell: bash
      run: rm -f ${{ env.DOWNLOADED_XSD_FILE }}
